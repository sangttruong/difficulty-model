# -*- coding: utf-8 -*-
"""Copy of unsloth_llama_practice

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14vSA6gTDmNZM_UpeEpztnUP2U11S1xHn
"""

!pip install "unsloth[colab-new] @ git+https://github.com/unslothai/unsloth.git"
!pip install --no-deps "xformers<0.0.27" "trl<0.9.0" peft accelerate bitsandbytes datasets

from unsloth import FastLanguageModel
import torch

model, tokenizer = FastLanguageModel.from_pretrained(
    model_name="unsloth/Meta-Llama-3.1-8B",
    max_seq_length=2048,
    dtype=None,
    load_in_4bit=True,
)

model = FastLanguageModel.get_peft_model(
    model,
    r=16,
    target_modules=["q_proj", "k_proj", "v_proj", "o_proj"],
    lora_alpha=16,
    lora_dropout=0,
    bias="none",
    use_gradient_checkpointing="unsloth",
    random_state=3407,
)

from datasets import load_dataset

def formatting_prompts_func(examples):
    # dont need to do anything here right now
    pass

dataset = load_dataset("yahma/alpaca-cleaned", split="train")
dataset = dataset.map(formatting_prompts_func, batched=True)

from trl import SFTTrainer
from transformers import TrainingArguments
print(dataset.column_names)

trainer = SFTTrainer(
    model=model,
    tokenizer=tokenizer,
    train_dataset=dataset,
    dataset_text_field="output",
    max_seq_length=2048,
    args=TrainingArguments(
        per_device_train_batch_size=2,
        gradient_accumulation_steps=4,
        warmup_steps=5,
        max_steps=60,
        learning_rate=2e-4,
        fp16=True,
        logging_steps=1,
        optim="adamw_8bit",
        weight_decay=0.01,
        output_dir="outputs",
    ),
)

trainer.train()

import os

# Mount Google Drive to Colab
from google.colab import drive
drive.mount('/content/drive')

#path
save_path = "/content/drive/My Drive/StanfordResearch/finetuningpractice/fine_tuned_model"
#if not made already
os.makedirs(save_path, exist_ok=True)

# Verify the path
print(f"Model will be saved to: {save_path}")

# Save the fine-tuned model
model.save_pretrained(save_path)
tokenizer.save_pretrained(save_path)
print(f"Model and tokenizer have been saved to {save_path}")

"""Perplexity compared between fine tuned alpaca and LLAMA"""

sample_text = ["Write a Python script that reads a CSV file, filters rows where the 'age' column is greater than 30, and writes the result to a new file."]

import torch
from unsloth import FastLanguageModel

def calculate_perplexity(model, tokenizer, text):
    encodings = tokenizer(text, return_tensors='pt')
    input_ids = encodings.input_ids
    with torch.no_grad():
        outputs = model(input_ids, labels=input_ids)
        log_likelihood = outputs.loss.item()

    perplexity = torch.exp(torch.tensor(log_likelihood))
    return perplexity

default_model, default_tokenizer = FastLanguageModel.from_pretrained(
    model_name="unsloth/Meta-Llama-3.1-8B",
    max_seq_length=2048,
    dtype=None,
    load_in_4bit=True,
)


default_perplexity = calculate_perplexity(default_model, default_tokenizer, sample_text)


print("Default Llama Perplexity:", default_perplexity)

from transformers import AutoModelForCausalLM, AutoTokenizer
import os

from google.colab import drive
drive.mount('/content/drive')
#load in fine tuned model
fine_tuned_model_path = "/content/drive/My Drive/StanfordResearch/finetuningpractice/fine_tuned_model"


fine_tuned_model = AutoModelForCausalLM.from_pretrained(fine_tuned_model_path)
fine_tuned_tokenizer = AutoTokenizer.from_pretrained(fine_tuned_model_path)
print("Model and tokenizer loaded successfully.")


fine_tuned_perplexity = calculate_perplexity(fine_tuned_model, fine_tuned_tokenizer, sample_text)

print("Fine-Tuned Alpaca Perplexity:", fine_tuned_perplexity)